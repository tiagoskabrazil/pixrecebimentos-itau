<?php
/**
 * ApiException
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Recebimentos Pix
 *
 * Recebimentos Pix
 *
 * OpenAPI spec version: 2.41.15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client;

use \Exception;

/**
 * ApiException Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HeaderSelector
{


    /**
     * @param string[] $config 
     * @param string[] $headersInput
     * @return array
     */
    public function aplicarHeadersITAU($config, $headersInput)
    {

        echo "Aplicando HEADERs Itaú...\n";

       // PRODUCAO
       if($config->isModoProducao()){
            
            if ($config->getPathCertificado() !== null && $config->getPathPrivateKey() !== null) {
                $headersInput['cert'] = $config->getPathCertificado();
                $headersInput['ssl_key'] = $config->getPathPrivateKey();
            }

            // !!!
            // DEFINIR O CABECALHO PARA TOKEN PRODUCAO!!!
            // !!!
            
        }else{
            // SANDBOX
            echo "MODO SANDBOX \n";
            if($config->getAccessToken()!==null || $config->getAccessToken()!==''){
                $headersInput['x-sandbox-token'] = $config->getAccessToken();
            }
        }
       
        $headersInput['x-itau-apikey'] = isset($config->apiKeys['x-itau-apikey']) ? $config->apiKeys['x-itau-apikey'] : 123;
        
        echo " HEADERs Itaú aplicados.\n";
        return $headersInput;
    }

    /**
     * @param string[] $accept
     * @param string[] $contentTypes
     * @return array
     */
    public function selectHeaders($accept, $contentTypes)
    {
        $headers = [];

        $accept = $this->selectAcceptHeader($accept);
        if ($accept !== null) {
            $headers['Accept'] = $accept;
        }

        $headers['Content-Type'] = $this->selectContentTypeHeader($contentTypes);
        return $headers;
    }

    /**
     * @param string[] $accept
     * @return array
     */
    public function selectHeadersForMultipart($accept)
    {
        $headers = $this->selectHeaders($accept, []);

        unset($headers['Content-Type']);
        return $headers;
    }

    /**
     * Return the header 'Accept' based on an array of Accept provided
     *
     * @param string[] $accept Array of header
     *
     * @return string Accept (e.g. application/json)
     */
    private function selectAcceptHeader($accept)
    {
        if (count($accept) === 0 || (count($accept) === 1 && $accept[0] === '')) {
            return null;
        } elseif (preg_grep("/application\/json/i", $accept)) {
            return 'application/json';
        } else {
            return implode(',', $accept);
        }
    }

    /**
     * Return the content type based on an array of content-type provided
     *
     * @param string[] $contentType Array fo content-type
     *
     * @return string Content-Type (e.g. application/json)
     */
    private function selectContentTypeHeader($contentType)
    {
        if (count($contentType) === 0 || (count($contentType) === 1 && $contentType[0] === '')) {
            return 'application/json';
        } elseif (preg_grep("/application\/json/i", $contentType)) {
            return 'application/json';
        } else {
            return implode(',', $contentType);
        }
    }
}

